name: Cargo - Publish

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  cargo-check:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.crates-check.outputs.version }}
      outdated: ${{ steps.crates-check.outputs.outdated }}

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Check crates.io"
        id: crates-check
        env:
          CRATE_NAME: ghastoolkit
        run: |
          set -e

          if [[ -f .release.yml ]]; then
            pip install yq > /dev/null
            current_version=$(yq -r ".version" .release.yml)
            echo "💻 Current Version :: $current_version"  
            echo "version=$current_version" >> $GITHUB_OUTPUT
          elif [[ -f Cargo.toml ]]; then
            current_version=$(grep "version =" Cargo.toml | cut -d '"' -f 2)
            echo "💻 Current Version :: $current_version"
            echo "version=$current_version" >> $GITHUB_OUTPUT
          else
            echo "Failed to find version..."
            exit 1
          fi

          crates_remote=$(curl -s https://crates.io/api/v1/crates/$CRATE_NAME/versions | jq -r '.versions[0].num')

          echo "🦀 Crates.io version :: $crates_remote"

          if [ "$current_version" != "$crates_remote" ]; then
            echo "🚀 The crate is outdated... Let's update it!"
            echo "outdated=true" >> $GITHUB_OUTPUT
          else
            echo "🍹 Crate is up to date. Lets sit back and relax..."
            echo "outdated=false" >> $GITHUB_OUTPUT
          fi

  cargo-publish:
    runs-on: ubuntu-latest
    needs: [ cargo-check ]

    if: ${{ needs.cargo-check.outputs.outdated == 'true' }}

    permissions:
      contents: write

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup - Rust Toolchain"
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          toolchain: stable
          components: clippy

      - name: "Build / Validate"
        run: |
          cargo build --workspace
          cargo test --workspace
          
      - name: "Publish"
        env:
          INPUT: ghastoolkit,ghastoolkit-cli
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_TOKEN }}
        run: |
          set -e

          IFS=',' read -r -a elements <<< "$INPUT"
          for element in "${elements[@]}"
          do
            echo "🚀 Publishing crate '$element'"
            cargo publish -p "$element" --allow-dirty
          done

      - name: "GitHub Release"
        env:
          VERSION: ${{ needs.cargo-check.outputs.version }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e
          git config user.name github-actions
          git config user.email github-actions@github.com

          git tag "${VERSION}" --force
          git push origin ${{ github.ref_name }}
          git push origin --tags --force

          gh release create --latest --generate-notes \
            --title "v${VERSION}" \
            "${VERSION}"

